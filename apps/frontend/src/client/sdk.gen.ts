// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from './core/CancelablePromise';
import { OpenAPI } from './core/OpenAPI';
import { request as __request } from './core/request';
import type { GetUsersData, GetUsersResponse, CreateUserData, CreateUserResponse, GetUserData, GetUserResponse, UpdateUserData, UpdateUserResponse, DeleteUserData, DeleteUserResponse, GetAsyncProfileSummaryData, GetAsyncProfileSummaryResponse, GetPostsResponse, CreatePostData, CreatePostResponse, GetPostData, GetPostResponse, GetUserPostsData, GetUserPostsResponse, GetDashboardResponse, GetAnalyticsResponse, GetAsyncDashboardStatsResponse, ReadRootResponse, GetSystemInfoResponse, GetPersistenceStatusResponse, AsyncDemoResponse, HealthCheckAsyncResponse, AsyncSimulationData, AsyncSimulationResponse, AsyncDataStreamData, AsyncDataStreamResponse, AsyncWorkflowData, AsyncWorkflowResponse, AsyncMonitorData, AsyncMonitorResponse, StreamProgressData, StreamProgressResponse, LiveMetricsData, LiveMetricsResponse, ReadRoot1Data, ReadRoot1Response } from './types.gen';

/**
 * Get all users
 * Returns list of users with pagination
 * @param data The data for the request.
 * @param data.skip Number of users to skip
 * @param data.limit Maximum number of users to return
 * @param data.search Search users by name or email
 * @returns UserResponse Successful Response
 * @throws ApiError
 */
export const getUsers = (data: GetUsersData = {}): CancelablePromise<GetUsersResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/api/v1/users',
        query: {
            skip: data.skip,
            limit: data.limit,
            search: data.search
        },
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Create new user
 * Creates and returns new user
 * @param data The data for the request.
 * @param data.requestBody
 * @returns UserResponse Successful Response
 * @throws ApiError
 */
export const createUser = (data: CreateUserData): CancelablePromise<CreateUserResponse> => {
    return __request(OpenAPI, {
        method: 'POST',
        url: '/api/v1/users',
        body: data.requestBody,
        mediaType: 'application/json',
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Get user by ID
 * Returns a single user by ID
 * @param data The data for the request.
 * @param data.userId
 * @returns UserResponse Successful Response
 * @throws ApiError
 */
export const getUser = (data: GetUserData): CancelablePromise<GetUserResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/api/v1/users/{user_id}',
        path: {
            user_id: data.userId
        },
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Update user
 * Updates and returns user
 * @param data The data for the request.
 * @param data.userId
 * @param data.requestBody
 * @returns UserResponse Successful Response
 * @throws ApiError
 */
export const updateUser = (data: UpdateUserData): CancelablePromise<UpdateUserResponse> => {
    return __request(OpenAPI, {
        method: 'PUT',
        url: '/api/v1/users/{user_id}',
        path: {
            user_id: data.userId
        },
        body: data.requestBody,
        mediaType: 'application/json',
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Delete user
 * Deletes a user
 * @param data The data for the request.
 * @param data.userId
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const deleteUser = (data: DeleteUserData): CancelablePromise<DeleteUserResponse> => {
    return __request(OpenAPI, {
        method: 'DELETE',
        url: '/api/v1/users/{user_id}',
        path: {
            user_id: data.userId
        },
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Async user profile summary
 * Generates a comprehensive profile summary with async processing
 * @param data The data for the request.
 * @param data.userId User ID to generate summary for
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const getAsyncProfileSummary = (data: GetAsyncProfileSummaryData): CancelablePromise<GetAsyncProfileSummaryResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/api/v1/users/async/profile-summary',
        query: {
            user_id: data.userId
        },
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Get all posts
 * Returns list of posts with relationships
 * @returns PostResponse Successful Response
 * @throws ApiError
 */
export const getPosts = (): CancelablePromise<GetPostsResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/api/v1/posts'
    });
};

/**
 * Create new post
 * Creates and returns new post
 * @param data The data for the request.
 * @param data.requestBody
 * @returns PostResponse Successful Response
 * @throws ApiError
 */
export const createPost = (data: CreatePostData): CancelablePromise<CreatePostResponse> => {
    return __request(OpenAPI, {
        method: 'POST',
        url: '/api/v1/posts',
        body: data.requestBody,
        mediaType: 'application/json',
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Get post by ID
 * Returns single post with author relationship
 * @param data The data for the request.
 * @param data.postId
 * @returns PostResponse Successful Response
 * @throws ApiError
 */
export const getPost = (data: GetPostData): CancelablePromise<GetPostResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/api/v1/posts/{post_id}',
        path: {
            post_id: data.postId
        },
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Get user's posts
 * Returns list of posts by specific user
 * @param data The data for the request.
 * @param data.userId
 * @returns PostResponse Successful Response
 * @throws ApiError
 */
export const getUserPosts = (data: GetUserPostsData): CancelablePromise<GetUserPostsResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/api/v1/users/{user_id}/posts',
        path: {
            user_id: data.userId
        },
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Dashboard with mixed SQLAlchemy models
 * Complex response combining multiple SQLAlchemy models
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const getDashboard = (): CancelablePromise<GetDashboardResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/api/v1/dashboard'
    });
};

/**
 * Analytics with aggregated data
 * Complex analytics combining SQLAlchemy queries and models
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const getAnalytics = (): CancelablePromise<GetAnalyticsResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/api/v1/analytics'
    });
};

/**
 * Async dashboard statistics
 * Demonstrates async database queries with real-time stats
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const getAsyncDashboardStats = (): CancelablePromise<GetAsyncDashboardStatsResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/api/v1/dashboard/async-stats'
    });
};

/**
 * Welcome to Enhanced Bridge Demo
 * Welcome endpoint showcasing dependency injection and persistence info.
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const readRoot = (): CancelablePromise<ReadRootResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/api/v1/'
    });
};

/**
 * System information
 * Get system and runtime information
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const getSystemInfo = (): CancelablePromise<GetSystemInfoResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/api/v1/system/info'
    });
};

/**
 * Detailed persistence information
 * Get comprehensive information about data persistence
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const getPersistenceStatus = (): CancelablePromise<GetPersistenceStatusResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/api/v1/persistence/status'
    });
};

/**
 * Async endpoint demonstration
 * Demonstrates async functionality with simulated work
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const asyncDemo = (): CancelablePromise<AsyncDemoResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/api/v1/system/async-demo'
    });
};

/**
 * Health Check Async
 * Async health check endpoint demonstrating async operations.
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const healthCheckAsync = (): CancelablePromise<HealthCheckAsyncResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/api/v1/health-async'
    });
};

/**
 * Async Simulation
 * Simulate async processing with multiple steps to demonstrate real async behavior.
 * @param data The data for the request.
 * @param data.steps Number of simulation steps
 * @param data.delay Delay between steps in seconds
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const asyncSimulation = (data: AsyncSimulationData = {}): CancelablePromise<AsyncSimulationResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/api/v1/async-simulation',
        query: {
            steps: data.steps,
            delay: data.delay
        },
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Async Data Stream
 * Simulate async data streaming with batch processing.
 * @param data The data for the request.
 * @param data.batchSize Number of items per batch
 * @param data.batches Number of batches to process
 * @param data.processingDelay Processing delay per batch
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const asyncDataStream = (data: AsyncDataStreamData = {}): CancelablePromise<AsyncDataStreamResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/api/v1/async-data-stream',
        query: {
            batch_size: data.batchSize,
            batches: data.batches,
            processing_delay: data.processingDelay
        },
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Async Workflow
 * Demonstrate a complex async workflow with multiple stages.
 * @param data The data for the request.
 * @param data.workflowComplexity Workflow complexity level
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const asyncWorkflow = (data: AsyncWorkflowData = {}): CancelablePromise<AsyncWorkflowResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/api/v1/async-workflow',
        query: {
            workflow_complexity: data.workflowComplexity
        },
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Async Monitor
 * Real-time async monitoring simulation with live metrics.
 * @param data The data for the request.
 * @param data.monitorDuration Monitoring duration in iterations
 * @param data.checkInterval Interval between checks
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const asyncMonitor = (data: AsyncMonitorData = {}): CancelablePromise<AsyncMonitorResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/api/v1/async-monitor',
        query: {
            monitor_duration: data.monitorDuration,
            check_interval: data.checkInterval
        },
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Stream Progress
 * Stream processing progress with real-time updates - designed for streaming UI.
 * @param data The data for the request.
 * @param data.totalSteps Total number of steps to process
 * @param data.stepDelay Delay between steps in seconds
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const streamProgress = (data: StreamProgressData = {}): CancelablePromise<StreamProgressResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/api/v1/stream-progress',
        query: {
            total_steps: data.totalSteps,
            step_delay: data.stepDelay
        },
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Live Metrics
 * Collect live system metrics for real-time monitoring dashboard.
 * @param data The data for the request.
 * @param data.metricCount Number of metric snapshots to collect
 * @param data.collectionInterval Interval between metric collections
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const liveMetrics = (data: LiveMetricsData = {}): CancelablePromise<LiveMetricsResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/api/v1/live-metrics',
        query: {
            metric_count: data.metricCount,
            collection_interval: data.collectionInterval
        },
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Welcome endpoint
 * Welcome endpoint showcasing the enhanced FastAPI implementation.
 * @param data The data for the request.
 * @param data.requestBody
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const readRoot1 = (data: ReadRoot1Data = {}): CancelablePromise<ReadRoot1Response> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/',
        body: data.requestBody,
        mediaType: 'application/json',
        errors: {
            422: 'Validation Error'
        }
    });
};