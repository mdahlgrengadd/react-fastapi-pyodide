// This file is auto-generated by @hey-api/openapi-ts

export type HTTPValidationError = {
    detail?: Array<ValidationError>;
};

/**
 * Schema for creating a new post.
 */
export type PostCreate = {
    title: string;
    content: string;
    published?: boolean;
    author_id: number;
};

/**
 * Schema for post response.
 */
export type PostResponse = {
    id: number;
    title: string;
    content: string;
    published: boolean;
    author_id: number;
    created_at: (string | null);
    updated_at: (string | null);
};

/**
 * Schema for creating a new user.
 */
export type UserCreate = {
    name: string;
    /**
     * Valid email address
     */
    email: string;
    age?: (number | null);
    bio?: (string | null);
};

/**
 * Schema for user response.
 */
export type UserResponse = {
    id: number;
    name: string;
    email: string;
    age: (number | null);
    is_active: boolean;
    bio: (string | null);
    created_at: (string | null);
};

/**
 * Schema for updating a user.
 */
export type UserUpdate = {
    name?: (string | null);
    email?: (string | null);
    age?: (number | null);
    bio?: (string | null);
    is_active?: (boolean | null);
};

export type ValidationError = {
    loc: Array<(string | number)>;
    msg: string;
    type: string;
};

export type GetUsersData = {
    /**
     * Maximum number of users to return
     */
    limit?: number;
    /**
     * Search users by name or email
     */
    search?: (string | null);
    /**
     * Number of users to skip
     */
    skip?: number;
};

export type GetUsersResponse = (Array<UserResponse>);

export type CreateUserData = {
    requestBody: UserCreate;
};

export type CreateUserResponse = (UserResponse);

export type GetUserData = {
    userId: number;
};

export type GetUserResponse = (UserResponse);

export type UpdateUserData = {
    requestBody: UserUpdate;
    userId: number;
};

export type UpdateUserResponse = (UserResponse);

export type DeleteUserData = {
    userId: number;
};

export type DeleteUserResponse = (unknown);

export type GetAsyncProfileSummaryData = {
    /**
     * User ID to generate summary for
     */
    userId: number;
};

export type GetAsyncProfileSummaryResponse = (unknown);

export type GetPostsResponse = (Array<PostResponse>);

export type CreatePostData = {
    requestBody: PostCreate;
};

export type CreatePostResponse = (PostResponse);

export type GetPostData = {
    postId: number;
};

export type GetPostResponse = (PostResponse);

export type GetUserPostsData = {
    userId: number;
};

export type GetUserPostsResponse = (Array<PostResponse>);

export type GetDashboardResponse = (unknown);

export type GetAnalyticsResponse = (unknown);

export type GetAsyncDashboardStatsResponse = (unknown);

export type ReadRootResponse = (unknown);

export type GetSystemInfoResponse = (unknown);

export type GetPersistenceStatusResponse = (unknown);

export type AsyncDemoResponse = (unknown);

export type HealthCheckAsyncResponse = (unknown);

export type AsyncSimulationData = {
    /**
     * Delay between steps in seconds
     */
    delay?: number;
    /**
     * Number of simulation steps
     */
    steps?: number;
};

export type AsyncSimulationResponse = (unknown);

export type AsyncDataStreamData = {
    /**
     * Number of batches to process
     */
    batches?: number;
    /**
     * Number of items per batch
     */
    batchSize?: number;
    /**
     * Processing delay per batch
     */
    processingDelay?: number;
};

export type AsyncDataStreamResponse = (unknown);

export type AsyncWorkflowData = {
    /**
     * Workflow complexity level
     */
    workflowComplexity?: string;
};

export type AsyncWorkflowResponse = (unknown);

export type AsyncMonitorData = {
    /**
     * Interval between checks
     */
    checkInterval?: number;
    /**
     * Monitoring duration in iterations
     */
    monitorDuration?: number;
};

export type AsyncMonitorResponse = (unknown);

export type StreamProgressData = {
    /**
     * Delay between steps in seconds
     */
    stepDelay?: number;
    /**
     * Total number of steps to process
     */
    totalSteps?: number;
};

export type StreamProgressResponse = (unknown);

export type LiveMetricsData = {
    /**
     * Interval between metric collections
     */
    collectionInterval?: number;
    /**
     * Number of metric snapshots to collect
     */
    metricCount?: number;
};

export type LiveMetricsResponse = (unknown);

export type ReadRoot1Data = {
    requestBody?: {
        [key: string]: unknown;
    };
};

export type ReadRoot1Response = (unknown);