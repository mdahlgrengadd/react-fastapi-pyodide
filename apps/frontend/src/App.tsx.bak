import './App.css';

import { Bridge, FetchInterceptor } from 'pyodide-bridge-ts';
import { useEffect, useRef, useState } from 'react';
import { FastAPIRouter } from 'react-router-fastapi';

// Auto-generated page imports
import { 
  AnalyticsPage,
  AsyncPage,
  DashboardPage,
  DashboardsPage,
  HealthPage,
  LivePage,
  PersistencePage,
  PostsPage,
  StreamPage,
  SystemPage,
  UsersPage
} from './pages';

import type { RouteConfig } from "react-router-fastapi";

function App() {
  const [bridge] = useState(
    () =>
      new Bridge({
        debug: true,
        packages: ["fastapi", "pydantic", "sqlalchemy", "httpx"],
      })
  );

  const [status, setStatus] = useState<string>("Initializing‚Ä¶");
  const [bridgeReady, setBridgeReady] = useState(false);
  const [interceptor, setInterceptor] = useState<InstanceType<
    typeof FetchInterceptor
  > | null>(null);
  const initializationRef = useRef(false);

  // Initialize bridge and setup interceptor
  useEffect(() => {
    const initializeBridge = async () => {
      if (initializationRef.current) {
        console.log("üîÑ Skipping duplicate initialization");
        return;
      }
      initializationRef.current = true;

      try {
        console.log("üöÄ Starting bridge initialization...");
        setStatus("Loading Pyodide‚Ä¶");
        await bridge.initialize();

        setStatus("Fetching backend sources‚Ä¶");
        const fileListResponse = await fetch("/backend/backend_filelist.json");
        if (!fileListResponse.ok) {
          throw new Error(`Failed to fetch file list: ${fileListResponse.statusText}`);
        }

        const fileList = await fileListResponse.json();
        setStatus("Loading backend files‚Ä¶");
        
        for (const file of fileList) {
          try {
            const response = await fetch(`/backend/${file}`);
            if (response.ok) {
              const content = await response.text();
              bridge.pyodide!.FS.writeFile(`/${file}`, content);
            }
          } catch (e) {
            console.warn(`Failed to load file ${file}:`, e);
          }
        }

        setStatus("Starting FastAPI server‚Ä¶");
        await bridge.loadModule("/app_main.py", { name: "app" });

        setStatus("Setting up API interceptor‚Ä¶");
        const { FetchInterceptor } = await import("pyodide-bridge-ts");
        const fetchInterceptor = new FetchInterceptor(bridge, {
          apiPrefix: "/api/v1",
          baseUrl: "http://localhost:8000",
          debug: true,
          routeMatcher: (url: string) => {
            if (url.match(/\.[a-zA-Z0-9]+(\?|$)/)) return false;
            if (url.startsWith("http://localhost:8000/")) {
              const path = url.replace("http://localhost:8000", "");
              return path.startsWith("/api/v1/") || path === "/docs" || path === "/openapi.json" || path === "/redoc";
            }
            if (!url.startsWith("http://") && !url.startsWith("https://") && !url.startsWith("//")) {
              return url.startsWith("/api/v1/") || url === "/docs" || url === "/openapi.json" || url === "/redoc";
            }
            return false;
          },
        });

        setInterceptor(fetchInterceptor);

        console.log("üîß Creating API client...");
        const { createAPIClient } = await import("react-router-fastapi");
        createAPIClient({
          baseURL: "http://localhost:8000",
          tokenKey: "access_token",
          refreshTokenKey: "refresh_token",
          retryAttempts: 3,
          retryDelay: 1000,
        });

        setBridgeReady(true);
        setStatus("Ready - FastAPI Router Active");
        console.log("‚úÖ Bridge and interceptor ready");
      } catch (e) {
        console.error("‚ùå Bridge initialization failed:", e);
        setStatus(`‚ùå ${(e as Error).message}`);
        initializationRef.current = false;
      }
    };

    if (!bridgeReady && !initializationRef.current) {
      initializeBridge();
    }

    return () => {
      if (interceptor) {
        interceptor.restore();
      }
    };
  }, [bridge]);

  // Auto-generated route definitions
  const routes: RouteConfig[] = [
    {
      path: "/",
      element: <DashboardPage />,
      requiresAuth: false,
    },
    {
      path: "/analytics",
      element: <AnalyticsPage />,
    },
    {
      path: "/async",
      element: <AsyncPage />,
    },
    {
      path: "/dashboards",
      element: <DashboardsPage />,
    },
    {
      path: "/health",
      element: <HealthPage />,
    },
    {
      path: "/live",
      element: <LivePage />,
    },
    {
      path: "/persistence",
      element: <PersistencePage />,
    },
    {
      path: "/posts",
      element: <PostsPage />,
    },
    {
      path: "/posts/:id",
      element: <PostsPage />,
    },
    {
      path: "/stream",
      element: <StreamPage />,
    },
    {
      path: "/system",
      element: <SystemPage />,
    },
    {
      path: "/users",
      element: <UsersPage />,
    },
    {
      path: "/users/:id",
      element: <UsersPage />,
    },
  ];

  if (!bridgeReady) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <div className="inline-block animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500 mb-4"></div>
          <h2 className="text-xl font-semibold text-gray-800 mb-2">Initializing FastAPI Bridge</h2>
          <p className={`text-lg ${status.includes("‚ùå") ? "text-red-600" : "text-gray-600"}`}>
            {status}
            {!status.includes("Ready") && !status.includes("‚ùå") && (
              <span className="inline-block ml-2 animate-spin">‚ö™</span>
            )}
          </p>
        </div>
      </div>
    );
  }

  return (
    <FastAPIRouter
      routes={routes}
      apiBaseURL="http://localhost:8000"
      enableDevTools={true}
      onError={(error: Error) => {
        console.error("FastAPI Router Error:", error);
        setStatus(`‚ùå Router Error: ${error.message}`);
      }}
      loadingComponent={() => (
        <div className="flex justify-center items-center p-8">
          <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500"></div>
        </div>
      )}
      errorComponent={({ error }: { error: Error }) => (
        <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded m-4">
          <strong className="font-bold">Error: </strong>
          <span className="block sm:inline">{error.message}</span>
        </div>
      )}
    />
  );
}

export default App;
